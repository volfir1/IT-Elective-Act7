// src/scss/layouts/_grid.scss
@use 'sass:math';
@use 'sass:map'; 
@use '../abstracts/variables' as v; // Changed from 'v' to 'vars'
@use '../abstracts/mixins' as mix;
// Container
.container {
    width: 100%;
    padding-right: v.$spacing-md;
    padding-left: v.$spacing-md;
    margin-right: auto;
    margin-left: auto;
  
    @each $breakpoint, $width in v.$container-max-widths {
        @include mix.respond-to($breakpoint) {
            max-width: $width;
        }
    }
  
    &-fluid {
        width: 100%;
        padding-right: v.$spacing-md;
        padding-left: v.$spacing-md;
        margin-right: auto;
        margin-left: auto;
    }
}
  
  
  // Grid System
  .row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -#{v.$spacing-md};
    margin-left: -#{v.$spacing-md};
}
  
  
  // Columns
  @for $i from 1 through 12 {
    .col-#{$i} {
        $width: math.div($i, 12);
        flex: 0 0 math.percentage($width);
        max-width: math.percentage($width);
        padding-right: v.$spacing-md;
        padding-left: v.$spacing-md;
    }
}
  
  // Responsive columns
  @each $breakpoint, $width in v.$container-max-widths {
    @include mix.respond-to($breakpoint) {
        @for $i from 1 through 12 {
            .col-#{$breakpoint}-#{$i} {
                $width: math.div($i, 12);
                flex: 0 0 math.percentage($width);
                max-width: math.percentage($width);
            }
        }
    }
}
  // Grid gaps
  .gap-0 { gap: 0; }
.gap-1 { gap: v.$spacing-xs; }
.gap-2 { gap: v.$spacing-sm; }
.gap-3 { gap: v.$spacing-md; }
.gap-4 { gap: v.$spacing-lg; }
.gap-5 { gap: v.$spacing-xl; }
  
  // Grid auto-fit
.grid {
    display: grid;
    gap: v.$spacing-md;
  
    &-auto-fit {
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }
  
    &-auto-fill {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
}
  
 // Masonry Grid
.masonry-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    grid-auto-rows: 0;
    grid-gap: v.$spacing-md;
}
  
  // Flex utilities
  .flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .flex-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .flex-around {
    display: flex;
    align-items: center;
    justify-content: space-around;
  }
  
  // Grid alignment
  .justify-start { justify-content: start; }
  .justify-end { justify-content: end; }
  .justify-center { justify-content: center; }
  .justify-between { justify-content: space-between; }
  .justify-around { justify-content: space-around; }
  .justify-evenly { justify-content: space-evenly; }
  
  .align-start { align-items: start; }
  .align-end { align-items: end; }
  .align-center { align-items: center; }
  .align-baseline { align-items: baseline; }
  .align-stretch { align-items: stretch; }
  
  // Order utilities
  @for $i from -1 through 12 {
    .order-#{$i} { order: $i; }
  }
  
  // Responsive order
  @each $breakpoint in map.keys(v.$container-max-widths) {
    @include mix.respond-to($breakpoint) {
        @for $i from -1 through 12 {
            .order-#{$breakpoint}-#{$i} { order: $i; }
        }
    }
}
